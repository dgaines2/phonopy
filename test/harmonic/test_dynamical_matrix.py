"""Tests for dynamical matrix classes."""

from __future__ import annotations

import numpy as np
import pytest

from phonopy import Phonopy
from phonopy.harmonic.dynamical_matrix import DynamicalMatrix, DynamicalMatrixGL

dynmat_ref_000 = [
    0.052897,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    -0.042597,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.052897,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    -0.042597,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.052897,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    -0.042597,
    0.000000,
    -0.042597,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.034302,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    -0.042597,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.034302,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    -0.042597,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.034302,
    0.000000,
]


dynmat_ref_252525 = [
    0.075295,
    0.000000,
    0.016777,
    0.000000,
    0.016777,
    0.000000,
    -0.040182,
    0.000000,
    -0.004226,
    0.000000,
    -0.004226,
    0.000000,
    0.016777,
    0.000000,
    0.075295,
    0.000000,
    0.016777,
    0.000000,
    -0.004226,
    0.000000,
    -0.040182,
    0.000000,
    -0.004226,
    0.000000,
    0.016777,
    0.000000,
    0.016777,
    0.000000,
    0.075295,
    0.000000,
    -0.004226,
    0.000000,
    -0.004226,
    0.000000,
    -0.040182,
    0.000000,
    -0.040182,
    0.000000,
    -0.004226,
    0.000000,
    -0.004226,
    0.000000,
    0.055704,
    0.000000,
    0.011621,
    0.000000,
    0.011621,
    0.000000,
    -0.004226,
    0.000000,
    -0.040182,
    0.000000,
    -0.004226,
    0.000000,
    0.011621,
    0.000000,
    0.055704,
    0.000000,
    0.011621,
    0.000000,
    -0.004226,
    0.000000,
    -0.004226,
    0.000000,
    -0.040182,
    0.000000,
    0.011621,
    0.000000,
    0.011621,
    0.000000,
    0.055704,
    0.000000,
]

dynmat_gonze_lee_ref_252525 = [
    0.081339,
    0.000000,
    0.029509,
    0.000000,
    0.029509,
    0.000000,
    -0.045098,
    0.000000,
    -0.015204,
    0.000000,
    -0.015204,
    0.000000,
    0.029509,
    0.000000,
    0.081339,
    0.000000,
    0.029509,
    0.000000,
    -0.015204,
    0.000000,
    -0.045098,
    0.000000,
    -0.015204,
    0.000000,
    0.029509,
    0.000000,
    0.029509,
    0.000000,
    0.081339,
    0.000000,
    -0.015204,
    0.000000,
    -0.015204,
    0.000000,
    -0.045098,
    0.000000,
    -0.045098,
    0.000000,
    -0.015204,
    0.000000,
    -0.015204,
    0.000000,
    0.059623,
    0.000000,
    0.019878,
    0.000000,
    0.019878,
    0.000000,
    -0.015204,
    0.000000,
    -0.045098,
    0.000000,
    -0.015204,
    0.000000,
    0.019878,
    0.000000,
    0.059623,
    0.000000,
    0.019878,
    0.000000,
    -0.015204,
    0.000000,
    -0.015204,
    0.000000,
    -0.045098,
    0.000000,
    0.019878,
    0.000000,
    0.019878,
    0.000000,
    0.059623,
    0.000000,
]

dynmat_gonze_lee_full_ref_252525 = [
    0.076944,
    0.000000,
    0.020251,
    -0.000000,
    0.020251,
    0.000000,
    -0.041523,
    -0.000000,
    -0.007221,
    0.000000,
    -0.007221,
    0.000000,
    0.020251,
    0.000000,
    0.076944,
    0.000000,
    0.020251,
    0.000000,
    -0.007221,
    0.000000,
    -0.041523,
    -0.000000,
    -0.007221,
    0.000000,
    0.020251,
    -0.000000,
    0.020251,
    -0.000000,
    0.076944,
    0.000000,
    -0.007221,
    0.000000,
    -0.007221,
    0.000000,
    -0.041523,
    -0.000000,
    -0.041523,
    0.000000,
    -0.007221,
    -0.000000,
    -0.007221,
    -0.000000,
    0.056774,
    0.000000,
    0.013874,
    -0.000000,
    0.013874,
    0.000000,
    -0.007221,
    -0.000000,
    -0.041523,
    0.000000,
    -0.007221,
    -0.000000,
    0.013874,
    0.000000,
    0.056774,
    0.000000,
    0.013874,
    -0.000000,
    -0.007221,
    -0.000000,
    -0.007221,
    -0.000000,
    -0.041523,
    0.000000,
    0.013874,
    -0.000000,
    0.013874,
    0.000000,
    0.056774,
    0.000000,
]

dynmat_wang_ref_252525 = [
    0.081339,
    -0.000000,
    0.022821,
    0.000000,
    0.022821,
    0.000000,
    -0.045098,
    -0.000000,
    -0.009142,
    -0.000000,
    -0.009142,
    0.000000,
    0.022821,
    0.000000,
    0.081339,
    0.000000,
    0.022821,
    0.000000,
    -0.009142,
    0.000000,
    -0.045098,
    0.000000,
    -0.009142,
    0.000000,
    0.022821,
    0.000000,
    0.022821,
    0.000000,
    0.081339,
    0.000000,
    -0.009142,
    0.000000,
    -0.009142,
    0.000000,
    -0.045098,
    0.000000,
    -0.045098,
    0.000000,
    -0.009142,
    0.000000,
    -0.009142,
    0.000000,
    0.059623,
    0.000000,
    0.015541,
    0.000000,
    0.015541,
    0.000000,
    -0.009142,
    0.000000,
    -0.045098,
    0.000000,
    -0.009142,
    0.000000,
    0.015541,
    0.000000,
    0.059623,
    0.000000,
    0.015541,
    0.000000,
    -0.009142,
    0.000000,
    -0.009142,
    0.000000,
    -0.045098,
    0.000000,
    0.015541,
    0.000000,
    0.015541,
    -0.000000,
    0.059623,
    0.000000,
]

dynmat_ref_555 = [
    0.091690,
    0.000000,
    0.033857,
    0.000000,
    0.033857,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.033857,
    0.000000,
    0.091690,
    0.000000,
    0.033857,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.033857,
    0.000000,
    0.033857,
    0.000000,
    0.091690,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.064909,
    0.000000,
    0.021086,
    0.000000,
    0.021086,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.021086,
    0.000000,
    0.064909,
    0.000000,
    0.021086,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.000000,
    0.021086,
    0.000000,
    0.021086,
    0.000000,
    0.064909,
    0.000000,
]


@pytest.mark.parametrize(
    "is_compact_fc,lang", [(True, "C"), (False, "C"), (True, "Py"), (False, "Py")]
)
def test_dynmat(
    ph_nacl_nonac: Phonopy,
    ph_nacl_nonac_compact_fc: Phonopy,
    is_compact_fc: bool,
    lang: str,
):
    """Test dynamical matrix of NaCl in C and python implementations.

    1. Without NAC.
    2. Without NAC with comapact fc2.

    """
    if is_compact_fc:
        ph = ph_nacl_nonac_compact_fc
    else:
        ph = ph_nacl_nonac
    dynmat = ph.dynamical_matrix
    _test_dynmat(dynmat, lang=lang)
    _test_dynmat_252525(dynmat, dynmat_ref_252525, lang=lang)


def test_dynmat_without_hermitianize(ph_tipn3: Phonopy):
    """Test dynamical matrix of NaCl without hermitianization."""
    ph = ph_tipn3
    ph_no_H = Phonopy(
        unitcell=ph.unitcell,
        supercell_matrix=ph.supercell_matrix,
        primitive_matrix=ph.primitive_matrix,
        hermitianize_dynamical_matrix=False,
    )
    ph_no_H.force_constants = ph.force_constants
    dynmat = ph_no_H.dynamical_matrix
    dynmat.run([0.1, 0.2, 0.3])
    ph.dynamical_matrix.run([0.1, 0.2, 0.3])

    dynmat_ref = [
        0.246182,
        0.000000,
        -0.000000,
        -0.000000,
        -0.000000,
        -0.009648,
        -0.001231,
        0.026915,
        -0.047527,
        0.024870,
        0.078951,
        0.077734,
        -0.084303,
        -0.001023,
        0.009297,
        -0.080021,
        -0.023184,
        -0.018592,
        -0.107065,
        -0.005219,
        0.009112,
        -0.010045,
        -0.080001,
        -0.001242,
        -0.083587,
        -0.007829,
        0.015321,
        0.080391,
        -0.007518,
        -0.019975,
        -0.000000,
        -0.000000,
        0.515422,
        -0.000000,
        -0.000000,
        -0.000000,
        -0.018988,
        0.009936,
        -0.259304,
        0.154188,
        -0.015551,
        -0.029717,
        -0.002328,
        -0.001161,
        -0.235996,
        0.131157,
        0.032138,
        -0.022431,
        0.011156,
        -0.012299,
        0.022446,
        -0.102197,
        0.024527,
        0.022247,
        0.005636,
        0.007996,
        -0.293945,
        -0.063835,
        -0.050716,
        -0.017157,
        0.000000,
        0.009648,
        -0.000000,
        0.000000,
        0.482365,
        -0.000000,
        0.069733,
        -0.012492,
        -0.016992,
        -0.032472,
        -0.124116,
        -0.104352,
        -0.011267,
        0.024675,
        0.149603,
        -0.080175,
        -0.153260,
        0.115963,
        -0.029131,
        0.020081,
        0.005702,
        0.005172,
        -0.228644,
        -0.294325,
        -0.023853,
        0.026147,
        -0.120559,
        0.054516,
        -0.131398,
        0.063685,
        -0.001231,
        -0.026915,
        -0.018988,
        -0.009936,
        0.069733,
        0.012492,
        0.820024,
        -0.000000,
        0.000000,
        0.000000,
        -0.000000,
        -0.066257,
        -0.108498,
        -0.017181,
        0.045681,
        -0.057560,
        -0.040677,
        0.053806,
        -0.789005,
        0.276959,
        0.001859,
        0.005062,
        0.022220,
        0.071625,
        -0.120159,
        0.005222,
        -0.019361,
        0.049779,
        -0.024440,
        0.052289,
        -0.047527,
        -0.024870,
        -0.259304,
        -0.154188,
        -0.016992,
        0.032472,
        0.000000,
        0.000000,
        1.395941,
        -0.000000,
        -0.000000,
        0.000000,
        0.028257,
        0.010674,
        -0.505309,
        -0.390639,
        0.344338,
        0.217636,
        0.003265,
        0.008889,
        -0.198528,
        0.096268,
        0.062267,
        -0.022870,
        0.041317,
        0.008775,
        -0.693907,
        0.003080,
        -0.445378,
        -0.040824,
        0.078951,
        -0.077734,
        -0.015551,
        0.029717,
        -0.124116,
        0.104352,
        0.000000,
        0.066257,
        -0.000000,
        -0.000000,
        1.400913,
        -0.000000,
        -0.026670,
        0.050024,
        0.498375,
        0.291571,
        -0.487754,
        -0.326309,
        0.014924,
        0.034324,
        -0.010796,
        0.003965,
        -0.599843,
        0.393903,
        -0.048399,
        0.032525,
        -0.495586,
        -0.163608,
        -0.520624,
        -0.171737,
        -0.084303,
        0.001023,
        -0.002328,
        0.001161,
        -0.011267,
        -0.024675,
        -0.108498,
        0.017181,
        0.028257,
        -0.010674,
        -0.026670,
        -0.050024,
        0.567230,
        -0.000000,
        0.000000,
        0.039170,
        -0.000000,
        0.030613,
        -0.029852,
        0.062189,
        -0.046011,
        -0.018681,
        0.140941,
        0.040334,
        -0.052209,
        -0.060516,
        -0.042993,
        0.074714,
        -0.025216,
        0.056896,
        0.009297,
        0.080021,
        -0.235996,
        -0.131157,
        0.149603,
        0.080175,
        0.045681,
        0.057560,
        -0.505309,
        0.390639,
        0.498375,
        -0.291571,
        0.000000,
        -0.039170,
        2.510098,
        0.000000,
        -1.197668,
        0.000000,
        -0.068923,
        -0.042748,
        -0.144722,
        0.109160,
        0.166564,
        -0.053277,
        -0.042993,
        0.074714,
        -0.786906,
        -0.022206,
        -0.134648,
        -0.025824,
        -0.023184,
        0.018592,
        0.032138,
        0.022431,
        -0.153260,
        -0.115963,
        -0.040677,
        -0.053806,
        0.344338,
        -0.217636,
        -0.487754,
        0.326309,
        -0.000000,
        -0.030613,
        -1.197668,
        0.000000,
        1.112969,
        0.000000,
        0.104091,
        0.067052,
        0.209195,
        -0.135690,
        -0.158517,
        0.046285,
        0.025216,
        -0.056896,
        0.134648,
        0.025824,
        0.164443,
        0.006806,
        -0.107065,
        0.005219,
        0.011156,
        0.012299,
        -0.029131,
        -0.020081,
        -0.789005,
        -0.276959,
        0.003265,
        -0.008889,
        0.014924,
        -0.034324,
        -0.029852,
        -0.062189,
        -0.068923,
        0.042748,
        0.104091,
        -0.067052,
        1.729199,
        0.000000,
        0.000000,
        0.000000,
        -0.000000,
        -0.055503,
        -0.053697,
        -0.033430,
        0.022943,
        -0.064929,
        0.065763,
        -0.083249,
        0.009112,
        0.010045,
        0.022446,
        0.102197,
        0.005702,
        -0.005172,
        0.001859,
        -0.005062,
        -0.198528,
        -0.096268,
        -0.010796,
        -0.003965,
        -0.046011,
        0.018681,
        -0.144722,
        -0.109160,
        0.209195,
        0.135690,
        0.000000,
        -0.000000,
        0.581692,
        0.000000,
        0.000000,
        0.000000,
        0.012461,
        -0.040541,
        -0.108391,
        -0.104691,
        -0.242565,
        -0.091879,
        -0.080001,
        0.001242,
        0.024527,
        -0.022247,
        -0.228644,
        0.294325,
        0.022220,
        -0.071625,
        0.062267,
        0.022870,
        -0.599843,
        -0.393903,
        0.140941,
        -0.040334,
        0.166564,
        0.053277,
        -0.158517,
        -0.046285,
        0.000000,
        0.055503,
        0.000000,
        -0.000000,
        2.199008,
        -0.000000,
        0.127628,
        -0.023512,
        -0.301551,
        -0.012477,
        -0.233111,
        0.003216,
        -0.083587,
        0.007829,
        0.005636,
        -0.007996,
        -0.023853,
        -0.026147,
        -0.120159,
        -0.005222,
        0.041317,
        -0.008775,
        -0.048399,
        -0.032525,
        -0.052209,
        0.060516,
        -0.042993,
        -0.074714,
        0.025216,
        0.056896,
        -0.053697,
        0.033430,
        0.012461,
        0.040541,
        0.127628,
        0.023512,
        0.567230,
        -0.000000,
        -0.000000,
        -0.039170,
        0.000000,
        0.030613,
        0.015321,
        -0.080391,
        -0.293945,
        0.063835,
        -0.120559,
        -0.054516,
        -0.019361,
        -0.049779,
        -0.693907,
        -0.003080,
        -0.495586,
        0.163608,
        -0.042993,
        -0.074714,
        -0.786906,
        0.022206,
        0.134648,
        -0.025824,
        0.022943,
        0.064929,
        -0.108391,
        0.104691,
        -0.301551,
        0.012477,
        -0.000000,
        0.039170,
        2.510098,
        -0.000000,
        1.197668,
        -0.000000,
        -0.007518,
        0.019975,
        -0.050716,
        0.017157,
        -0.131398,
        -0.063685,
        -0.024440,
        -0.052289,
        -0.445378,
        0.040824,
        -0.520624,
        0.171737,
        -0.025216,
        -0.056896,
        -0.134648,
        0.025824,
        0.164443,
        -0.006806,
        0.065763,
        0.083249,
        -0.242565,
        0.091879,
        -0.233111,
        -0.003216,
        0.000000,
        -0.030613,
        1.197668,
        -0.000000,
        1.112969,
        0.000000,
    ]
    np.testing.assert_allclose(
        dynmat.dynamical_matrix.view("double").ravel(),
        dynmat_ref,
        atol=1e-5,
    )

    # print(
    #     ",".join([f"{v:.6f}" for v in dynmat.dynamical_matrix.view("double").ravel()])
    # )


@pytest.mark.parametrize("lang", ["C", "Py"])
def test_dynmat_dense_svecs(ph_nacl_nonac_dense_svecs: Phonopy, lang: str):
    """Test with dense svecs."""
    ph = ph_nacl_nonac_dense_svecs
    dynmat = ph.dynamical_matrix
    _test_dynmat(dynmat, lang=lang)
    _test_dynmat_252525(dynmat, dynmat_ref_252525, lang=lang)


def test_dynmat_gonze_lee(ph_nacl: Phonopy):
    """Test with NAC by Gonze and Lee."""
    dynmat = ph_nacl.dynamical_matrix
    _test_dynmat_252525(dynmat, dynmat_gonze_lee_ref_252525)


def test_dynmat_gonze_lee_short_range_fc(ph_nacl: Phonopy):
    """Test force constants in dynamical matrix with NAC by Gonze and Lee."""
    # Test getter
    ph_nacl.dynamical_matrix.make_Gonze_nac_dataset()

    assert ph_nacl.dynamical_matrix._G_cutoff == pytest.approx(1.1584988384375283)
    assert ph_nacl.dynamical_matrix._G_list.shape == (307, 3)
    np.testing.assert_allclose(
        ph_nacl.dynamical_matrix._dd_q0.view("double").ravel(),
        [
            0.5509692730441111,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.5509692730441109,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.5509692730441113,
            0.0,
            0.5509692730441111,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.5509692730441109,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.0,
            0.5509692730441113,
            0.0,
        ],
        atol=1e-5,
    )
    fc = ph_nacl.dynamical_matrix.force_constants
    sr_fc = ph_nacl.dynamical_matrix.short_range_force_constants
    np.testing.assert_allclose(
        np.diag(fc[0, 1]), [-0.3017767, 0.0049673, 0.0049673], atol=1e-5
    )
    np.testing.assert_allclose(
        np.diag(sr_fc[0, 1]), [-0.13937495, -0.04645899, -0.04645899], atol=1e-5
    )

    # Test setter.
    ph_nacl.dynamical_matrix.short_range_force_constants = fc
    sr_fc = ph_nacl.dynamical_matrix.short_range_force_constants
    np.testing.assert_allclose(
        np.diag(sr_fc[0, 1]), [-0.3017767, 0.0049673, 0.0049673], atol=1e-5
    )
    ph_nacl.dynamical_matrix.make_Gonze_nac_dataset()
    sr_fc = ph_nacl.dynamical_matrix.short_range_force_constants
    np.testing.assert_allclose(
        np.diag(sr_fc[0, 1]), [-0.13937495, -0.04645899, -0.04645899], atol=1e-5
    )


def test_dynmat_gonze_lee_full_term(ph_nacl: Phonopy):
    """Test with NAC by Gonze and Lee."""
    dynmat = ph_nacl.dynamical_matrix
    _dynmat = DynamicalMatrixGL(
        dynmat.supercell,
        dynmat.primitive,
        dynmat.force_constants,
        nac_params=dynmat.nac_params,
        with_full_terms=True,
    )
    _test_dynmat_252525(_dynmat, dynmat_gonze_lee_full_ref_252525)


def test_dynmat_wang(ph_nacl_wang: Phonopy):
    """Test with NAC by Wang et al."""
    dynmat = ph_nacl_wang.dynamical_matrix
    _test_dynmat_252525(dynmat, dynmat_wang_ref_252525)


def _test_dynmat(dynmat: DynamicalMatrix, lang=None):
    dtype_complex = "c%d" % (np.dtype("double").itemsize * 2)
    if lang:
        dynmat.run([0, 0, 0], lang=lang)
    else:
        dynmat.run([0, 0, 0])
    dynmat_ref = (
        np.array(dynmat_ref_000, dtype="double").view(dtype=dtype_complex).reshape(6, 6)
    )
    np.testing.assert_allclose(dynmat.dynamical_matrix, dynmat_ref, atol=1e-5)

    if lang:
        dynmat.run([0.5, 0.5, 0.5], lang=lang)
    else:
        dynmat.run([0.5, 0.5, 0.5])
    dynmat_ref = (
        np.array(dynmat_ref_555, dtype="double").view(dtype=dtype_complex).reshape(6, 6)
    )
    np.testing.assert_allclose(dynmat.dynamical_matrix, dynmat_ref, atol=1e-5)


def _test_dynmat_252525(dynmat: DynamicalMatrix, dynmat_ref: list, lang=None):
    dtype_complex = "c%d" % (np.dtype("double").itemsize * 2)
    if lang:
        dynmat.run([0.25, 0.25, 0.25], lang=lang)
    else:
        dynmat.run([0.25, 0.25, 0.25])
    # for row in dynmat.dynamical_matrix:
    #     print("".join(["%f, %f, " % (c.real, c.imag) for c in row]))

    np.testing.assert_allclose(
        dynmat.dynamical_matrix,
        np.array(dynmat_ref, dtype="double").view(dtype=dtype_complex).reshape(6, 6),
        atol=1e-5,
    )
